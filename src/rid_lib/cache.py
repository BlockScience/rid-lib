import os
import json
import shutil
from dataclasses import dataclass
from .core import RID
from .manifest import Manifest
from .utils import encode_b64, decode_b64


# Cache Implementation

@dataclass
class CacheObject:
    """Object representing an individual RID cache entry.

    A container object for the cached data associated with an RID. It is 
    returned by the read and write functions of a CacheInterface. It 
    stores the JSON data associated with an RID object and corresponding
    metadata.
    """
    manifest: Manifest
    data: dict
    
    @classmethod
    def from_dict(cls, d: dict):
        return cls(
            manifest=Manifest.from_dict(d["manifest"]),
            data=d["data"]
        )

    def to_dict(self): 
        return {
            "manifest": self.manifest.to_dict(),
            "data": self.data,
        }


class CacheInterface:
    def __init__(self, directory="cache"):
        self.directory = directory
        
    def file_path_to(self, rid: RID):
        encoded_rid_str = encode_b64(str(rid))
        return f"{self.directory}/{encoded_rid_str}.json"

    def write(self, rid: RID, data: dict, manifest: Manifest | None = None) -> CacheObject:
        """Writes data (dict) to RID cache with autogenerated metadata.

        Returns a CacheObject.
        """

        if not os.path.exists(self.directory):
            os.makedirs(self.directory)
            
        if manifest is None:
            manifest = Manifest.generate(rid, data)

        cache_entry = CacheObject(manifest, data)

        with open(self.file_path_to(rid), "w") as f:
            json.dump(cache_entry.to_dict(), f, indent=2)

        return cache_entry
    
    def exists(self, rid: RID):
        return os.path.exists(
            self.file_path_to(rid)
        )

    def read(self, rid: RID):
        """Reads and returns CacheObject from RID cache."""
        try:
            with open(self.file_path_to(rid), "r") as f:
                return CacheObject.from_dict(json.load(f))
        except FileNotFoundError:
            return None
        
    def read_all_rids(self):
        rids = []
        for filename in os.listdir(self.directory):
            encoded_rid_str = filename.split(".")[0]
            rid_str = decode_b64(encoded_rid_str)
            rid = RID.from_string(rid_str, allow_prov_ctx=True)
            rids.append(rid)
            
        return rids
                
    def delete(self, rid: RID):
        """Deletes RID cache entry and associated files."""
        try:
            os.remove(self.file_path_to(rid))
        except FileNotFoundError:
            return

    def drop(self):
        """Deletes all RID cache entries."""
        try:
            shutil.rmtree(self.directory)
        except FileNotFoundError:
            return

