import os
import json
import shutil
from dataclasses import dataclass
from rid_lib.core import RID
from .manifest import Manifest
from .utils import b64_encode, b64_decode


@dataclass
class CacheEntry:
    """Object representing an individual RID cache entry.

    A container object for the cached data associated with an RID. It is 
    returned by the read and write functions of Cache. It 
    stores the contents and manifest of an RID object.
    """
    manifest: Manifest
    contents: dict
    
    @classmethod
    def from_json(cls, data: dict):
        return cls(
            manifest=Manifest.from_json(data["manifest"]),
            contents=data["contents"]
        )

    def to_json(self): 
        return {
            "manifest": self.manifest.to_json(),
            "contents": self.contents,
        }


class Cache:
    def __init__(self, directory="rid_cache"):
        self.directory = directory
        
    def file_path_to(self, rid: RID):
        encoded_rid_str = b64_encode(str(rid))
        return f"{self.directory}/{encoded_rid_str}.json"

    def write(self, rid: RID, contents: dict, manifest: Manifest | None = None) -> CacheEntry:
        """Writes contents to cache with an autogenerated manifest, returns a CacheEntry.
        """

        if not os.path.exists(self.directory):
            os.makedirs(self.directory)
            
        if manifest is None:
            manifest = Manifest.generate(rid, contents)

        cache_entry = CacheEntry(manifest, contents)

        with open(self.file_path_to(rid), "w") as f:
            json.dump(cache_entry.to_json(), f, indent=2)

        return cache_entry
    
    def exists(self, rid: RID):
        return os.path.exists(
            self.file_path_to(rid)
        )

    def read(self, rid: RID):
        """Reads and returns CacheEntry from RID cache."""
        try:
            with open(self.file_path_to(rid), "r") as f:
                return CacheEntry.from_json(json.load(f))
        except FileNotFoundError:
            return None
        
    def read_all_rids(self):
        rids = []
        for filename in os.listdir(self.directory):
            encoded_rid_str = filename.split(".")[0]
            rid_str = b64_decode(encoded_rid_str)
            rid = RID.from_string(rid_str, allow_prov_ctx=True)
            rids.append(rid)
            
        return rids
                
    def delete(self, rid: RID):
        """Deletes cache entry."""
        try:
            os.remove(self.file_path_to(rid))
        except FileNotFoundError:
            return

    def drop(self):
        """Deletes all cache entries."""
        try:
            shutil.rmtree(self.directory)
        except FileNotFoundError:
            return

